var t=(t,r,a,e,h)=>(a-t)*(h-e)/(r-t)+e,r=(r,a,e,h,M)=>e<r?h:e>a?M:t(r,a,e,h,M),a=(t,r,a)=>(1-a)*t+a*r,e=(t,r,a)=>Math.max(t,Math.min(r,a)),h=(t,r,e)=>{const h=r.findIndex((r=>r>t));return-1===h?e[e.length-1]:0===h?e[0]:a(e[h-1],e[h],(t-r[h-1])/(r[h]-r[h-1]))},M=(t,r=t=>t)=>[Math.min(...t.map(r)),Math.max(...t.map(r))],n=(t,r=t=>t)=>Math.min(...t.map(r)),o=(t,r=t=>t)=>Math.max(...t.map(r)),d=(t,r,e)=>{const h=t.match(/\d+(\.\d+)?/g)?.map(Number)||[0,0,0,1],M=r.match(/\d+(\.\d+)?/g)?.map(Number)||[0,0,0,1],n=[...h.slice(0,3),h[3]??1],o=[...M.slice(0,3),M[3]??1],d=Math.round(a(n[0],o[0],e)),u=Math.round(a(n[1],o[1],e)),$=Math.round(a(n[2],o[2],e)),b=a(n[3],o[3],e);return 1===b?`rgb(${d}, ${u}, ${$})`:`rgba(${d}, ${u}, ${$}, ${b})`},u=(t,r)=>{let a;return(...e)=>{clearTimeout(a),a=window.setTimeout((()=>t.apply(void 0,e)),r)}},$=(t,r)=>{let a=0;return(...e)=>{const h=Date.now();h-a>r&&(a=h,t.apply(void 0,e))}},b=t=>t.reduce(((t,r)=>t+r),0),c=t=>Object.values(t||{}).reduce(((t,r)=>t+r),0);export{e as clamp,u as debounce,M as extend,a as lerp,t as mapRange,r as mapRangeClamp,o as max,d as mergeRGB,n as min,h as nonLinearMap,b as sum,c as sumObject,$ as throttle};